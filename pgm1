
#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to check if the password is valid
int isValidPassword(char* password) {
    int hasDigit = 0;     // Flag to check if the password contains a digit
    int hasLower = 0;     // Flag to check if the password contains a lowercase letter
    int hasUpper = 0;     // Flag to check if the password contains an uppercase letter
    int hasSpace = 0;     // Flag to check if the password contains a space
    int hasSlash = 0;     // Flag to check if the password contains a slash
    int length = strlen(password);  // Calculate the length of the password

    // Check if the password is too short
    if (length < 6) {
        return 0;  // Return 0 (invalid) if the password has fewer than 6 characters
    }

    // Loop through each character in the password
    for (int i = 0; i < length; i++) {
        if (isdigit(password[i])) hasDigit = 1;  // Check for a digit
        if (islower(password[i])) hasLower = 1;  // Check for a lowercase letter
        if (isupper(password[i])) hasUpper = 1;  // Check for an uppercase letter
        if (password[i] == ' ') hasSpace = 1;    // Check for a space
        if (password[i] == '/') hasSlash = 1;    // Check for a slash
    }

    // If the password meets all criteria, return 1 (valid)
    if (hasDigit && hasLower && hasUpper && !hasSpace && !hasSlash) {
        return 1;  // Password is valid
    } else {
        return 0;  // Password is invalid
    }
}

int main() {
    char password[1001];  // Define a character array to hold the password (up to 1000 characters)

    // Prompt the user to enter a password
    printf("Enter the password: ");
    scanf("%1000s", password);  // Read the input password, limiting to 1000 characters

    // Check if the password is valid using the isValidPassword function
    if (isValidPassword(password)) {
        printf("password valid\n");  // If valid, print "password valid"
    } else {
        printf("Invalid password\n");  // If invalid, print "Invalid password"
    }

    return 0;  // Return 0 to indicate that the program ended successfully
}
